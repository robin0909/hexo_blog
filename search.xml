<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[测试]]></title>
      <url>http://yoursite.com/2017/03/14/%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<p> hello world! 开篇以hello world开始，大家就能知道我是什么职业。</p>
]]></content>
      
        <categories>
            
            <category> blog </category>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> demo </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gradle总结]]></title>
      <url>http://yoursite.com/2017/03/14/gradle%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>geadle跟maven很类似的东西，但是他写起来比maven简洁，所以力荐使用gradle来构建我们的项目，而且gradle使用groovy开发的，所以gradle能够书写逻辑，但是maven这方便就很弱了，下面就来看看gradle。</p>
<h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="使用java插件"><a href="#使用java插件" class="headerlink" title="使用java插件"></a>使用java插件</h2><p>就像maven里的插件一样，gradle也有插件概念，但是这里引入插件就很简洁，只需要一行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin:&apos;java&apos;	//该插件会去src/main/java下找源代码，并打包生成build文件夹，里面有很多生成的资源</div></pre></td></tr></table></figure></p>
<h2 id="设置gradle支持utf-8"><a href="#设置gradle支持utf-8" class="headerlink" title="设置gradle支持utf-8"></a>设置gradle支持utf-8</h2><p>gradle版本的差异，有可能存在不支持汉字，所以这里配置支持UTF-8，最好每次构建项目，都配置上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[compileJava, compileTestJava]*.options*.encoding = &apos;UTF-8&apos;</div></pre></td></tr></table></figure></p>
<h2 id="定制项目"><a href="#定制项目" class="headerlink" title="定制项目"></a>定制项目</h2><p>项目编译jdk版本设置，有了这个属性，更换不同版本jdk进行编译就变得非常简单，比如：我电脑安装的是jdk8，但是我为了打成jar包兼容低版本的项目，以前我们的做法是，在电脑上安装多个jdk然后修改环境变量进行切换，现在不用那么麻烦，你只需要讲下面的两个属性sourceCompatibility，targetCompatibility都设置1.7,这样即使真是环境是jdk8，但是编译后的class是jdk7的环境的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">version = 0.1		//项目版本</div><div class="line"></div><div class="line">//设置java版本</div><div class="line">sourceCompatibility = 1.7</div><div class="line">targetCompatibility = 1.7</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jar&#123;				</div><div class="line">    manifest &#123;	</div><div class="line">        attributes &apos;Main-Class&apos;:&apos;com.robin.demo&apos;	//在jar包的MANIFEST.MF里添加属性（这里是运行的主类）</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结构定制"><a href="#结构定制" class="headerlink" title="结构定制"></a>结构定制</h2><p>maven 的标准目录结构，大家应该有一定印象吧！src/main/java/<em> , src/main/resources/</em>, src/test/java/* 等等，但是有些项目的特殊性，这里支持结构的定制（一般不要修改，按照默认的标准就可以）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//改变默认的目录结构</div><div class="line">sourceSets &#123;</div><div class="line">    main&#123;</div><div class="line">        java&#123;</div><div class="line">            srcDirs = [&apos;src&apos;]	//默认的源码结构是src/main/java,这里修改成了src</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    test&#123;</div><div class="line">    	java&#123;</div><div class="line">            srcDirs = [&apos;test&apos;]	//默认的源码结构是src/test/java,这里修改成了test</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>将src/main下的generated文件夹修改为类路径，如何在geadle里设置脚本？马上想到的解法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        java &#123;</div><div class="line">            srcDirs = [&apos;src/main/generated&apos;]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>上面的写法是错误的</strong>，为何？因为这样设置，会将源码的目录设置成了generated，而原来的src/main/java目录就失效了，不是资源目录了。正确的写法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        java &#123;</div><div class="line">            srcDirs += &apos;src/main/generated&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>解释</strong>：srcDirs这个属性的类型是数组，如果要改变的话就直接=[‘ ‘]，这样就改变整个数组的值，而 +=’ ‘ 是向数组里添加值。</p>
<h3 id="排除一些资源"><a href="#排除一些资源" class="headerlink" title="排除一些资源"></a>排除一些资源</h3><p>某些class不想打进jar包里去，或者war包里去，如何做？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        java &#123;</div><div class="line">            exclude &apos;com/robin/demo&apos;    //这样com.robin.demo包下的所有类都不会打进jar下</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="问题：-1"><a href="#问题：-1" class="headerlink" title="问题："></a>问题：</h3><p>我们在src/main/java/**.xml的mybatis映射文件打包到war包下的classes下会失败，如何将解决？</p>
<ol>
<li>方式一：<br>在resources资源目录下新建com/robin/**.xml文件，这样打包会打到classes下的。</li>
<li>方式二：将src/main/java/**.xml配置成资源目录，在build.gradle里添加：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        resources &#123; </div><div class="line">            //这里的srcDir是方法，上面的是属性</div><div class="line">            srcDir &apos;src/main/java&apos; //可以将java目录下的所有非.java资源打包到classes下</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="输出定制"><a href="#输出定制" class="headerlink" title="输出定制"></a>输出定制</h2><p>输出定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">buildDir = &apos;out&apos;	//定义输出路径，原来的是build文件夹下的</div></pre></td></tr></table></figure></p>
<h2 id="定义仓库"><a href="#定义仓库" class="headerlink" title="定义仓库"></a>定义仓库</h2><p>默认使用的maven仓库下载jar，但是速度就…这里给出如何配置私服，下面的给出的是配置aliyun的私服地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">repositories&#123;</div><div class="line">    jcenter()</div><div class="line">    maven &#123;</div><div class="line">        url &apos;http://maven.aliyun.com/nexus/content/groups/public&apos;--修改成阿里云的仓库</div><div class="line">    &#125;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="定义依赖"><a href="#定义依赖" class="headerlink" title="定义依赖"></a>定义依赖</h2><p>重头戏来了，开始怎么引入jar包了，也就是配置依赖。下面的第一行compile是完整写法，第二个compile是简写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile group:&apos;org.apache.commons&apos;, name:&apos;comcc&apos;, version:&apos;3.1&apos;</div><div class="line">    compile &apos;org.apache.commons:comcc:3.1&apos;		--上下等价，下面是简写</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="消除依赖"><a href="#消除依赖" class="headerlink" title="消除依赖"></a>消除依赖</h2><p>在项目构建的时候经常发生jar冲突问题，此时如何消除依赖了，下面给出消除依赖的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">compile (&quot;com.alibaba:dubbo:$&#123;dubboVersion&#125;&quot;) &#123;</div><div class="line">    exclude group: &quot;org.springframework&quot;</div><div class="line">    exclude module: &quot;comcc&quot; // name所对应的</div><div class="line">    exclude group: &quot;&quot;, module: &quot;&quot; //可以更加详细</div><div class="line">&#125;</div><div class="line"></div><div class="line"># exclude group: groupName</div></pre></td></tr></table></figure></p>
<h1 id="web部分"><a href="#web部分" class="headerlink" title="web部分"></a>web部分</h1><h2 id="war插件的使用"><a href="#war插件的使用" class="headerlink" title="war插件的使用"></a>war插件的使用</h2><p>进行war包构建相关的逻辑，需要引入war这个插件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;war&apos;	--这个插件主要应用与web下开发的，并且自扩展java插件</div></pre></td></tr></table></figure></p>
<h3 id="结构："><a href="#结构：" class="headerlink" title="结构："></a>结构：</h3><p>一个web项目的标准结构，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">|	</div><div class="line">---build.gradle</div><div class="line">|</div><div class="line">---src</div><div class="line">    |</div><div class="line">    --main</div><div class="line">        |</div><div class="line">        ---java/..</div><div class="line">        |</div><div class="line">        ---resources/..</div><div class="line">        |	</div><div class="line">        ----webapp</div><div class="line">            |</div><div class="line">            ---WEB-INF/web.xml</div><div class="line">            |</div><div class="line">            ---css/..</div></pre></td></tr></table></figure></p>
<h3 id="依赖域"><a href="#依赖域" class="headerlink" title="依赖域"></a>依赖域</h3><p>有的依赖是不需要跟war打在一起的，那么就可以使用providedCompile.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    providedCompile &apos;javax.servlet:servlet-api:2.5&apos;		--这个依赖由容器(例如tomcat)提供,这里会有jetty提供，他不会打包到war包里面</div><div class="line">			</div><div class="line">    runtime &apos;javax.servlet:jstl:1.1.2&apos;		--jstl这种依赖，编译时不需要，运行时需要，会成为war包的一部分</div><div class="line">&#125;</div><div class="line">--运行后会在build/libs下有个war包</div></pre></td></tr></table></figure></p>
<h2 id="定制web项目"><a href="#定制web项目" class="headerlink" title="定制web项目"></a>定制web项目</h2><p>下面是一个非标准结构的web项目，我们如何对下面的结构进行定制了？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">|</div><div class="line">--build.gradle</div><div class="line">|</div><div class="line">--src</div><div class="line">|  |</div><div class="line">|   --main/java</div><div class="line">|</div><div class="line">|</div><div class="line">---static</div><div class="line">|      |</div><div class="line">|      --css</div><div class="line">|</div><div class="line">----webfile</div><div class="line">	|</div><div class="line">	--WEB-INF/web.xml</div><div class="line">	|</div><div class="line">	---jsp/..</div></pre></td></tr></table></figure></p>
<p>写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">webAppDirName = &apos;webfile&apos;	--默认属性是src/main/webapp</div><div class="line">	</div><div class="line">war&#123;</div><div class="line">    from &apos;static&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加多个war资源目录，由于from的参数是from(Object…obj)，所以用可变参数结构来添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">war &#123;</div><div class="line">    from &apos;static01&apos;, &apos;static02&apos;, ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="jetty插件的使用"><a href="#jetty插件的使用" class="headerlink" title="jetty插件的使用"></a>jetty插件的使用</h2><p>开发阶段，我们可以使用jetty作为web容器，进行开发，速度快，便捷。下面通过插件引入，很简洁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;jetty&apos;</div></pre></td></tr></table></figure></p>
<p>运行指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle jettyRun (即使没有jar包也能跑起来)</div></pre></td></tr></table></figure></p>
<p>给jetty配置属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jettyRun &#123;</div><div class="line">    httpPort = 80		--修改jetty运行的端口号</div><div class="line">    contextPath = &apos;todo&apos;	--修改应用名</div><div class="line">&#125;</div><div class="line">//  http://localhost:80/todo</div></pre></td></tr></table></figure></p>
<h2 id="常用补充"><a href="#常用补充" class="headerlink" title="常用补充"></a>常用补充</h2><p>我们在使用Project和Task类时，这里已经为我们提供了默认的对象，我们只需要调用方法即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">version &apos;1.0&apos;	--调用Project里的setVersion(..)方法的</div></pre></td></tr></table></figure></p>
<p>当然我们可以在build.gradle里定义自己的外部属性，然后直接引用自己定义属性，通过ext命名空间：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">    vertxVersion = &quot;3.1.2&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &quot;io.vertx:vertx-core:$&#123;vertxVersion&#125;&quot;	--这里一定要用&quot;&quot;来引起字符串，不要用&apos;&apos;，否则$&#123;vertxVersion&#125;就变成了字符串而不会被转义</div></pre></td></tr></table></figure></p>
<p><strong>建议：</strong><br>尽量使用” “而少使用’ ‘</p>
<h1 id="自定义task"><a href="#自定义task" class="headerlink" title="自定义task"></a>自定义task</h1><h2 id="定义任务-关键字-task-【任务名】"><a href="#定义任务-关键字-task-【任务名】" class="headerlink" title="定义任务 关键字 task 【任务名】"></a>定义任务 关键字 task 【任务名】</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">--定义任务</div><div class="line">task print&#123;</div><div class="line">    doFirst &#123;</div><div class="line">        println &quot;01&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    doLast &#123;</div><div class="line">        println &quot;02&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>doFirst和doLast正如名字一样，一个先执行，一个后执行。下面是向已经定义的任务里添加动作(doFirst类型的话，会向顶部添加，doLast的话，会向底部添加)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">print.doFirst &#123;</div><div class="line">    println &quot;03&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">print.doLast &#123;</div><div class="line">    println &quot;04&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将自己的任务加入到gradle生命周期的一个标准任务里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">build.doFirst &#123;</div><div class="line">	//...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="gradle基于SLF4J实现了一个日志"><a href="#gradle基于SLF4J实现了一个日志" class="headerlink" title="gradle基于SLF4J实现了一个日志"></a>gradle基于SLF4J实现了一个日志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">task printVersion&lt;&lt;&#123;</div><div class="line">    logger.info(&quot;Version:$version&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="dependsOn任务依赖"><a href="#dependsOn任务依赖" class="headerlink" title="dependsOn任务依赖"></a>dependsOn任务依赖</h2><p>可以在一个任务里，依赖多个任务，执行run之前，会先执行[two, first] ，这里two, first这两个任务执行没有顺序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">task first&lt;&lt;&#123;</div><div class="line">    println &quot;one&quot;</div><div class="line">&#125;</div><div class="line">task two&lt;&lt;&#123;</div><div class="line">    println &quot;two&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">task run(dependsOn:[two, first]) &#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另一种添加依赖的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">task third &#123;</div><div class="line">    println &quot;third&quot;</div><div class="line">&#125;</div><div class="line">third.dependsOn(&quot;run&quot;)</div></pre></td></tr></table></figure></p>
<h2 id="finalizedBy指定下一个任务"><a href="#finalizedBy指定下一个任务" class="headerlink" title="finalizedBy指定下一个任务"></a>finalizedBy指定下一个任务</h2><p>上面[two, first]没有顺序，可以使用finalizedBy强行指定顺序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">task first&lt;&lt;&#123;</div><div class="line">    println &quot;one&quot;</div><div class="line">&#125;</div><div class="line">task two&lt;&lt;&#123;</div><div class="line">    println &quot;two&quot;</div><div class="line">&#125;</div><div class="line">two.finalizedBy first</div></pre></td></tr></table></figure></p>
<h2 id="任务配置块"><a href="#任务配置块" class="headerlink" title="任务配置块"></a>任务配置块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">task run &#123;</div><div class="line">    print(&quot;hello&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>随便运行gradle build/gradle clean…都会执行run这个任务块，这就是任务配置块</strong><br>为何他总会执行？<br>要从gradle的构建生命周期来解释，每个任务执行都会经历：<strong>初始化、配置、执行</strong>，三个阶段，<br><strong>所以配置块在第二阶段会执行</strong><br>配置任务快执行是有一定顺序的，当任务A依赖任务B，则A-&gt;B的。</p>
<h1 id="gradle的多项目构建"><a href="#gradle的多项目构建" class="headerlink" title="gradle的多项目构建"></a>gradle的多项目构建</h1><h2 id="在一个项目里创建几个子项目"><a href="#在一个项目里创建几个子项目" class="headerlink" title="在一个项目里创建几个子项目"></a>在一个项目里创建几个子项目</h2><p>结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">rootPrject</div><div class="line">|</div><div class="line">---sub01</div><div class="line">|       |</div><div class="line">|       ----src/main/java</div><div class="line">---sub02</div><div class="line">|       |</div><div class="line">|       ----src/main/java</div><div class="line">---subWeb</div><div class="line">|       |</div><div class="line">|       ----src/main/java</div><div class="line">---build.gradle</div><div class="line">|</div><div class="line">---settings.gradle</div></pre></td></tr></table></figure></p>
<h3 id="在settings-gradle文件里设置："><a href="#在settings-gradle文件里设置：" class="headerlink" title="在settings.gradle文件里设置："></a>在settings.gradle文件里设置：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include &apos;sub01&apos;, &apos;sub02&apos;, &apos;subWeb&apos;</div></pre></td></tr></table></figure>
<p> 或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">include &apos;sub01&apos;</div><div class="line">include &apos;sub02&apos;</div><div class="line">include &apos;subWeb&apos;</div></pre></td></tr></table></figure></p>
<p>注意：setings.gradle会在构建初始化阶段执行。</p>
<h3 id="在根项目下配置gradle的逻辑："><a href="#在根项目下配置gradle的逻辑：" class="headerlink" title="在根项目下配置gradle的逻辑："></a>在根项目下配置gradle的逻辑：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">ext.projectIds = [group:&quot;com.robin&quot;, version:&quot;1.0-SNAPSHOT&quot;]</div><div class="line"></div><div class="line">group = projectIds.group;</div><div class="line">version = projectIds.version</div><div class="line"></div><div class="line">project(&quot;:sub01&quot;) &#123; //每个子模块也是一个项目，:是路径，我们可以申明sub/sub001下的sub001位一个子项目，此时写法是project(:sub:sub001)</div><div class="line">    group = projectIds.group;</div><div class="line">    version = projectIds.version</div><div class="line"></div><div class="line">    apply plugin: &quot;java&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">project(&quot;:sub02&quot;) &#123;</div><div class="line">    group = projectIds.group;</div><div class="line">    version = projectIds.version</div><div class="line"></div><div class="line">    apply plugin: &quot;java&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">project(&quot;:subWeb&quot;) &#123;</div><div class="line">    group = projectIds.group;</div><div class="line">    version = projectIds.version;</div><div class="line"></div><div class="line">    apply plugin: &quot;war&quot;</div><div class="line">    apply plugin: &quot;jetty&quot;</div><div class="line"></div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        providedCompile &quot;javax.servlet:servlet-api:2.5&quot;</div><div class="line">        runtime &quot;javax.servlet:jstl:1.1.2&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个项目都有group和versin属性，上面的做法是将group和version的值放入list集合然后添加到ext域里去，这样才能被其他模块引用。一般我们将其他模块需要引用的变量，我们会放入到ext里去的。</p>
<h2 id="项目之间的依赖"><a href="#项目之间的依赖" class="headerlink" title="项目之间的依赖"></a>项目之间的依赖</h2><p>一般子项目sub01和sub02会打成jar包的，而subWeb的子项目会打成war包的，并且subWeb项目会依赖sub01、sub02这两个项目。下面我们来生命项目之间的依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">project(&quot;:sub01&quot;) &#123;</div><div class="line">    ...</div><div class="line">    apply plugin: &quot;java&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">project(&quot;:sub02&quot;) &#123;</div><div class="line"></div><div class="line">    apply plugin: &quot;java&quot;    //一定要加上这个，否则项目之间的依赖会出错</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        compile project(&apos;:sub01&apos;);   //编译时依赖sub01</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">project(&quot;:subWeb&quot;) &#123;</div><div class="line"></div><div class="line">    apply plugin: &quot;war&quot;</div><div class="line">    apply plugin: &quot;jetty&quot;</div><div class="line"></div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        providedCompile &quot;javax.servlet:servlet-api:2.5&quot;</div><div class="line"></div><div class="line">        compile project(&quot;:sub02&quot;)</div><div class="line">        runtime &quot;javax.servlet:jstl:1.1.2&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用allProjects和subProjects来构建公共项目块："><a href="#使用allProjects和subProjects来构建公共项目块：" class="headerlink" title="使用allProjects和subProjects来构建公共项目块："></a>使用allProjects和subProjects来构建公共项目块：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;       //所有的项目都共有，包括根项目和子项目</div><div class="line">    group = &quot;com.robin&quot;</div><div class="line">    version = &quot;1.0-SNAPSHOT&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">subprojects &#123;   //所有的子项目包含java插件</div><div class="line">    apply plugin: &quot;java&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将子项目的构建脚本也写在根build.gradle写显示不是好的选择，可以在每个子项目下创建一个build.gradle文件。</p>
<ul>
<li>以后根build.gradle下只有：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;       //所有的项目都共有，包括根项目和子项目</div><div class="line">    group = &quot;com.robin&quot;</div><div class="line">    version = &quot;1.0-SNAPSHOT&quot;</div><div class="line"></div><div class="line">//    apply plugin: &quot;java&quot;  //若是这里加了java插件，那么跟项目下的src目录也是起作用，所以不建议添加在此处</div><div class="line">&#125;</div><div class="line"></div><div class="line">subprojects &#123;</div><div class="line">    apply plugin: &quot;java&quot;</div><div class="line"></div><div class="line">    sourceCompatibility = 1.8</div><div class="line"></div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>子项目subWeb的build.gradle下有：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">apply plugin: &quot;war&quot;</div><div class="line">apply plugin: &quot;jetty&quot;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    providedCompile &quot;javax.servlet:servlet-api:2.5&quot;</div><div class="line"></div><div class="line">    compile project(&quot;:sub02&quot;)</div><div class="line">    runtime &quot;javax.servlet:jstl:1.1.2&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他的子项目也是类似的。</p>
<h2 id="gretty插件"><a href="#gretty插件" class="headerlink" title="gretty插件"></a>gretty插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;org.akhikhl.gretty&apos;</div><div class="line"></div><div class="line">gretty &#123;</div><div class="line">    servletContainer = &apos;tomcat8&apos;</div><div class="line">    httpPort = 80</div><div class="line">    contextPath = &quot;&quot;</div><div class="line">    debugSuspend = false</div><div class="line">&#125;</div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;org.akhikhl.gretty:gretty:+&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="gradle打包常用任务"><a href="#gradle打包常用任务" class="headerlink" title="gradle打包常用任务"></a>gradle打包常用任务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def replace(fileName, map) &#123;</div><div class="line">    def fl = file(fileName)</div><div class="line">    def content = fl.getText(&quot;UTF-8&quot;)</div><div class="line">    map.each &#123; k, v -&gt; content = content.replace(k, v) &#125;</div><div class="line">    fl.write(content, &quot;UTF-8&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">def cp(source, dest) &#123;</div><div class="line">    file(dest).write(file(source).getText(&quot;UTF-8&quot;), &quot;UTF-8&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="gradle插件开发"><a href="#gradle插件开发" class="headerlink" title="gradle插件开发"></a>gradle插件开发</h1><p>开发工具：idea, gradle</p>
<h2 id="新建工程："><a href="#新建工程：" class="headerlink" title="新建工程："></a>新建工程：</h2><p>在idea里新建root工程plugins， 修改build.gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line"></div><div class="line">    group &apos;com.robin&apos;</div><div class="line">    version &apos;1.0-SNAPSHOT&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">subprojects &#123;</div><div class="line">    apply plugin: &apos;groovy&apos;</div><div class="line"></div><div class="line">    repositories &#123;</div><div class="line">        maven &#123;</div><div class="line">            url &quot;http://nexus.nxin.com/nexus/content/groups/public/&quot;</div><div class="line">        &#125;</div><div class="line">        mavenCentral()</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="新建子工程"><a href="#新建子工程" class="headerlink" title="新建子工程"></a>新建子工程</h2><h3 id="新建gradle-groovy的plugin01子工程，其build-gradle为："><a href="#新建gradle-groovy的plugin01子工程，其build-gradle为：" class="headerlink" title="新建gradle groovy的plugin01子工程，其build.gradle为："></a>新建gradle groovy的plugin01子工程，其build.gradle为：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//插件坐标</div><div class="line">group &apos;com.nxin&apos;</div><div class="line">version &apos;1.2&apos;</div><div class="line"></div><div class="line">apply plugin: &apos;maven&apos;</div><div class="line"></div><div class="line">uploadArchives &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenDeployer &#123;</div><div class="line">            //测试，打包到本地</div><div class="line">            repository(url: uri(&apos;../repo&apos;))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile gradleApi()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在src-main-groovy下新建com-robin-demo-HelloPlugin-groovy类："><a href="#在src-main-groovy下新建com-robin-demo-HelloPlugin-groovy类：" class="headerlink" title="在src/main/groovy下新建com.robin.demo.HelloPlugin.groovy类："></a>在src/main/groovy下新建com.robin.demo.HelloPlugin.groovy类：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.robin.demo</div><div class="line"></div><div class="line">import org.gradle.api.Plugin</div><div class="line">import org.gradle.api.Project</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by robin on 2017/1/12.</div><div class="line"> */</div><div class="line">class HelloPlugin implements Plugin&lt;Project&gt; &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void apply(Project project) &#123;</div><div class="line"></div><div class="line">        project.task(&apos;hello&apos;) &#123;</div><div class="line">            println &quot;HelloWorld&quot;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="给插件指定简短别名"><a href="#给插件指定简短别名" class="headerlink" title="给插件指定简短别名"></a>给插件指定简短别名</h3><p>方便 apply plugin: shortName r;在resources下新建META-INF/gradle-plugins/hello.properties,hello就是shortNmae,hello.properties里的内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">implementation-class=com.robin.demo.HelloPlugin</div></pre></td></tr></table></figure></p>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>然后在子工程下打包，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle -q upload    //打包成jar</div></pre></td></tr></table></figure></p>
<h3 id="新建测试子模块-testHelloPlugin-build-gradle为："><a href="#新建测试子模块-testHelloPlugin-build-gradle为：" class="headerlink" title="新建测试子模块 testHelloPlugin,build.gradle为："></a>新建测试子模块 testHelloPlugin,build.gradle为：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">group &apos;com.robin&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        maven &#123;</div><div class="line">            url uri(&apos;../repo&apos;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.nxin:plugin01:1.2&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;hello&apos;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">//    compile &apos;org.codehaus.groovy:groovy-all:2.3.11&apos;</div><div class="line">//    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.11&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在子模块中运行 gradle hello</p>
]]></content>
      
        
        <tags>
            
            <tag> gradle </tag>
            
            <tag> java </tag>
            
            <tag> 构建 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
