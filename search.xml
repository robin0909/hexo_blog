<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[AES加密解密技术]]></title>
      <url>http://yoursite.com/2017/03/22/AES%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<h1 id="AES加密解密技术"><a href="#AES加密解密技术" class="headerlink" title="AES加密解密技术"></a>AES加密解密技术</h1><hr>
<p>一般都听说过MD5加密技术，MD5加密确实强大。但那是非对称加密技术，也就是说从密文变成明文不是那么容易。当我们需要一种对称性加密技术，MD5就不适用了。比如视频加密解密，此时就可以用ASE加密解密了。</p>
<p>AES有更安全、灵活、有效率等优点，使用范围也很广，所以今天就讲讲AES加密如何使用，这里以java开展。</p>
<h2 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h2><ol>
<li>就是把明文转换为密文，密文转换为明文的一把钥匙。接下来我们会用ASE加密技术生成一把密钥。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public void generateSecretKey() &#123;</div><div class="line">    KeyGenerator keyGenerator = null;</div><div class="line">    FileOutputStream fos = null;</div><div class="line">    try &#123;</div><div class="line">        keyGenerator = KeyGenerator.getInstance(&quot;AES&quot;);</div><div class="line">        keyGenerator.init(128);//size</div><div class="line">        SecretKey secretKey = keyGenerator.generateKey();</div><div class="line">        byte[] keyBytes = secretKey.getEncoded();</div><div class="line">        fos = new FileOutputStream(&quot;key&quot;);</div><div class="line">        fos.write(keyBytes);</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; finally &#123;</div><div class="line">        try &#123;</div><div class="line">            if (fos != null) &#123;</div><div class="line">                fos.close();</div><div class="line">            &#125;</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>keyGenerator.init(128); 这里是初始化密钥的长度。翻看底层代码，发现密钥支持的长度为：128, 192 or 256。我们这里是128位的长度，也就是16byte。</p>
<p>补充： 刚学习的时候，看到网上有人把密钥（字节码）转变成字符串保存，然后用来加密解密的时候，很有可能出错。因为不同语言的原因，字符串转变成字节码就有可能不再是原来的字节码了。</p>
<p>密钥生成后，在项目目录下可以找到一个key文件。</p>
<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>将明文和密钥一起，作为参数传入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * ASE 加密</div><div class="line"> * @param str 明文</div><div class="line"> * @param key 秘钥</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static String enStr(String str, byte[] key) &#123;</div><div class="line">    Cipher cipher = null;</div><div class="line">    SecretKey generateKey = null;</div><div class="line">    try &#123;</div><div class="line">        generateKey = new SecretKeySpec(key, &quot;AES&quot;);</div><div class="line">        cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);</div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE, generateKey);</div><div class="line">        byte[] resultBytes = cipher.doFinal(str.getBytes());</div><div class="line">        return Hex.encodeHexString(resultBytes);</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        logger.error(&quot;AES加密出错&quot;, e);</div><div class="line">    &#125;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>解密就是加密的互逆过程，所以代码很类似。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> /**</div><div class="line"> * 解密</div><div class="line"> * @param key 秘钥</div><div class="line"> * @param str 密文</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static String deStr(String str, byte[] key) &#123;</div><div class="line">    Cipher cipher = null;</div><div class="line">    SecretKey generateKey = null;</div><div class="line">    try &#123;</div><div class="line">        generateKey = new SecretKeySpec(key, &quot;AES&quot;);</div><div class="line">        cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);</div><div class="line">        cipher.init(Cipher.DECRYPT_MODE, generateKey);</div><div class="line">        byte[] result = Hex.decodeHex(str.toCharArray());</div><div class="line">        return new String(cipher.doFinal(result));</div><div class="line"></div><div class="line">    &#125; catch(Exception e) &#123;</div><div class="line">        logger.error(&quot;ASE解密出错&quot;, e);</div><div class="line">    &#125;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 加密 </tag>
            
            <tag> 解密 </tag>
            
            <tag> AES </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vertx实现redis版session共享]]></title>
      <url>http://yoursite.com/2017/03/18/vertx%E5%AE%9E%E7%8E%B0redis%E7%89%88session%E5%85%B1%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h1 id="vertx实现redis版session共享"><a href="#vertx实现redis版session共享" class="headerlink" title="vertx实现redis版session共享"></a>vertx实现redis版session共享</h1><hr>
<p>现在越来越流行微服务架构了，提到微服务架构的话，大家能想到的是spring boot和vertx吧！前者大家听的比交多些，但是今天我给大家分享的是后者vertx。想要了解更多请阅读vertx官网<a href="http://vertx.io/docs/vertx-web/java/" target="_blank" rel="external">http://vertx.io/docs/vertx-web/java/</a>  </p>
<p>废话不多说了，直接进主题。今天分享的是vertx web里的session共享问题。在公司我用vertx开发了一个web平台，但是需要防止宕机无法继续提供服务这种情况，所以部署了两台机器，这里就开始涉及到了session共享了。为了性能考虑，我就想把session放入redis里来达到目的，可是在vertx官网没有这种实现，当时我就用Hazelcast（网友说，性能不怎么好）将就先用着。前几天我抽时间看了底层代码，自己动手封装了下，将session放入redis里。github地址: <a href="https://github.com/robin0909/vertxSession" target="_blank" rel="external">https://github.com/robin0909/vertxSession</a></p>
<h2 id="原生vertx-session-设计"><a href="#原生vertx-session-设计" class="headerlink" title="原生vertx session 设计"></a>原生vertx session 设计</h2><p>下面给出 LocalSessionStoreImpl 和 ClusteredSessionStoreImpl 的结构关系:</p>
<p>LocalSession:<br><img src="http://omsqgbvkw.bkt.clouddn.com/localSession.png" alt="localSession核心结构"></p>
<p>ClusteredSession:<br><img src="http://omsqgbvkw.bkt.clouddn.com/clusteredSession.png" alt=""></p>
<p>从上面的结构中我们能找到一个继承实现关系，顶级接口是SessionStore,<br>而SessionStore是什么接口呢？在vertx里，session有一个专门的设计，这里的SessionStore就是专门为存储session而定义接口，看看这个接口里定义了哪些方法吧！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SessionStore</span> </span>&#123;</div><div class="line">  <span class="comment">//主要在分布式session共享时会用到的属性，从store里获取session的重试时间</span></div><div class="line">  <span class="function"><span class="keyword">long</span> <span class="title">retryTimeout</span><span class="params">()</span></span>;</div><div class="line">    </div><div class="line">  <span class="function">Session <span class="title">createSession</span><span class="params">(<span class="keyword">long</span> timeout)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//根据sessionId从store里获取Session</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(String id, Handler&lt;AsyncResult&lt;@Nullable Session&gt;&gt; resultHandler)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//删除</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id, Handler&lt;AsyncResult&lt;Boolean&gt;&gt; resultHandler)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//增加session</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(Session session, Handler&lt;AsyncResult&lt;Boolean&gt;&gt; resultHandler)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//清空</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Handler&lt;AsyncResult&lt;Boolean&gt;&gt; resultHandler)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//store的size</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">size</span><span class="params">(Handler&lt;AsyncResult&lt;Integer&gt;&gt; resultHandler)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//关闭，释放资源操作</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面很多会用到有一个属性，就是sessionId（id）。在session机制里，还需要依靠浏览器端的cookie。当服务器端session生成后，服务器会在cookie里设置一个vertx-web.session=4d9db69d-7577-4b17-8a66-4d6a2472cd33 返回给浏览器。想必大家也看出来了，就是一个uuid码，也就是sessionId。</p>
<p>接下来，我们可以看下二级子接口。二级子接口的作用，其实很简单，直接上代码，大家就懂了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LocalSessionStore</span> <span class="keyword">extends</span> <span class="title">SessionStore</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">long</span> DEFAULT_REAPER_INTERVAL = <span class="number">1000</span>;</div><div class="line"></div><div class="line">  String DEFAULT_SESSION_MAP_NAME = <span class="string">"vertx-web.sessions"</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">static</span> LocalSessionStore <span class="title">create</span><span class="params">(Vertx vertx)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LocalSessionStoreImpl(vertx, DEFAULT_SESSION_MAP_NAME, DEFAULT_REAPER_INTERVAL);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">static</span> LocalSessionStore <span class="title">create</span><span class="params">(Vertx vertx, String sessionMapName)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LocalSessionStoreImpl(vertx, sessionMapName, DEFAULT_REAPER_INTERVAL);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">static</span> LocalSessionStore <span class="title">create</span><span class="params">(Vertx vertx, String sessionMapName, <span class="keyword">long</span> reaperInterval)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LocalSessionStoreImpl(vertx, sessionMapName, reaperInterval);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里主要为了方面在使用和构造时很优雅，router.route().handler(SessionHandler.create(LocalSessionStore.create(vertx))); 有点类似工厂，创造对象。在这个接口里，也可以初始化一些专有参数。所以没有什么难度。</p>
<p>对官方代码我们也理解的差不多了，接下来开始动手封装自己的RedisSessionStore吧！</p>
<h2 id="自己的RedisSessionStore封装"><a href="#自己的RedisSessionStore封装" class="headerlink" title="自己的RedisSessionStore封装"></a>自己的RedisSessionStore封装</h2><p>首先我们定义一个RedisSessionStore接口， 接口继承SessionStore接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by robinyang on 2017/3/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RedisSessionStore</span> <span class="keyword">extends</span> <span class="title">SessionStore</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> DEFAULT_RETRY_TIMEOUT = <span class="number">2</span> * <span class="number">1000</span>;</div><div class="line"></div><div class="line">    String DEFAULT_SESSION_MAP_NAME = <span class="string">"vertx-web.sessions"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> RedisSessionStore <span class="title">create</span><span class="params">(Vertx vertx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisSessionStoreImpl(vertx, DEFAULT_SESSION_MAP_NAME, DEFAULT_RETRY_TIMEOUT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> RedisSessionStore <span class="title">create</span><span class="params">(Vertx vertx, String sessionMapName)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisSessionStoreImpl(vertx, sessionMapName, DEFAULT_RETRY_TIMEOUT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> RedisSessionStore <span class="title">create</span><span class="params">(Vertx vertx, String sessionMapName, <span class="keyword">long</span> reaperInterval)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisSessionStoreImpl(vertx, sessionMapName, reaperInterval);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">RedisSessionStore <span class="title">host</span><span class="params">(String host)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">RedisSessionStore <span class="title">port</span><span class="params">(<span class="keyword">int</span> port)</span></span>;</div><div class="line">    </div><div class="line">    <span class="function">RedisSessionStore <span class="title">auth</span><span class="params">(String pwd)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着创建一个RedisSessionStoreImpl类, 这里我先给出一个已经写好的RedisSessionStoreImpl, 稍后解释。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSessionStoreImpl</span> <span class="keyword">implements</span> <span class="title">RedisSessionStore</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(RedisSessionStoreImpl.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Vertx vertx;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String sessionMapName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> retryTimeout;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LocalMap&lt;String, Session&gt; localMap;</div><div class="line"></div><div class="line">    <span class="comment">//默认值</span></div><div class="line">    <span class="keyword">private</span> String host = <span class="string">"localhost"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">6379</span>;</div><div class="line">    <span class="keyword">private</span> String auth;</div><div class="line"></div><div class="line">    RedisClient redisClient;</div><div class="line"></div><div class="line">    <span class="comment">// 清除所有时使用</span></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; localSessionIds;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisSessionStoreImpl</span><span class="params">(Vertx vertx, String defaultSessionMapName, <span class="keyword">long</span> retryTimeout)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.vertx = vertx;</div><div class="line">        <span class="keyword">this</span>.sessionMapName = defaultSessionMapName;</div><div class="line">        <span class="keyword">this</span>.retryTimeout = retryTimeout;</div><div class="line"></div><div class="line">        localMap = vertx.sharedData().getLocalMap(sessionMapName);</div><div class="line">        localSessionIds = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line">        redisManager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">retryTimeout</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> retryTimeout;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Session <span class="title">createSession</span><span class="params">(<span class="keyword">long</span> timeout)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SessionImpl(<span class="keyword">new</span> PRNG(vertx), timeout, DEFAULT_SESSIONID_LENGTH);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Session <span class="title">createSession</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SessionImpl(<span class="keyword">new</span> PRNG(vertx), timeout, length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String id, Handler&lt;AsyncResult&lt;Session&gt;&gt; resultHandler)</span> </span>&#123;</div><div class="line">        redisClient.getBinary(id, res-&gt;&#123;</div><div class="line">            <span class="keyword">if</span>(res.succeeded()) &#123;</div><div class="line">                Buffer buffer = res.result();</div><div class="line">                <span class="keyword">if</span>(buffer != <span class="keyword">null</span>) &#123;</div><div class="line">                    SessionImpl session = <span class="keyword">new</span> SessionImpl(<span class="keyword">new</span> PRNG(vertx));</div><div class="line">                    session.readFromBuffer(<span class="number">0</span>, buffer);</div><div class="line">                    resultHandler.handle(Future.succeededFuture(session));</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    resultHandler.handle(Future.succeededFuture(localMap.get(id)));</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                resultHandler.handle(Future.failedFuture(res.cause()));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id, Handler&lt;AsyncResult&lt;Boolean&gt;&gt; resultHandler)</span> </span>&#123;</div><div class="line">        redisClient.del(id, res-&gt;&#123;</div><div class="line">            <span class="keyword">if</span> (res.succeeded()) &#123;</div><div class="line">                localSessionIds.remove(id);</div><div class="line">                resultHandler.handle(Future.succeededFuture(<span class="keyword">true</span>));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                resultHandler.handle(Future.failedFuture(res.cause()));</div><div class="line">                logger.error(<span class="string">"redis里删除sessionId: &#123;&#125; 失败"</span>, id, res.cause());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Session session, Handler&lt;AsyncResult&lt;Boolean&gt;&gt; resultHandler)</span> </span>&#123;</div><div class="line">        <span class="comment">//put 之前判断session是否存在，如果存在的话，校验下</span></div><div class="line">        redisClient.getBinary(session.id(), res1-&gt;&#123;</div><div class="line">            <span class="keyword">if</span> (res1.succeeded()) &#123;</div><div class="line">                <span class="comment">//存在数据</span></div><div class="line">                <span class="keyword">if</span>(res1.result()!=<span class="keyword">null</span>) &#123;</div><div class="line">                    Buffer buffer = res1.result();</div><div class="line">                    SessionImpl oldSession = <span class="keyword">new</span> SessionImpl(<span class="keyword">new</span> PRNG(vertx));</div><div class="line">                    oldSession.readFromBuffer(<span class="number">0</span>, buffer);</div><div class="line">                    SessionImpl newSession = (SessionImpl)session;</div><div class="line">                    <span class="keyword">if</span>(oldSession.version() != newSession.version()) &#123;</div><div class="line">                        resultHandler.handle(Future.failedFuture(<span class="string">"Version mismatch"</span>));</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                    newSession.incrementVersion();</div><div class="line">                    writeSession(session, resultHandler);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//不存在数据</span></div><div class="line">                    SessionImpl newSession = (SessionImpl)session;</div><div class="line">                    newSession.incrementVersion();</div><div class="line">                    writeSession(session, resultHandler);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                resultHandler.handle(Future.failedFuture(res1.cause()));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeSession</span><span class="params">(Session session, Handler&lt;AsyncResult&lt;Boolean&gt;&gt; resultHandler)</span> </span>&#123;</div><div class="line"></div><div class="line">        Buffer buffer = Buffer.buffer();</div><div class="line">        SessionImpl sessionImpl = (SessionImpl)session;</div><div class="line">        <span class="comment">//将session序列化到 buffer里</span></div><div class="line">        sessionImpl.writeToBuffer(buffer);</div><div class="line"></div><div class="line">        SetOptions setOptions = <span class="keyword">new</span> SetOptions().setPX(session.timeout());</div><div class="line">        redisClient.setBinaryWithOptions(session.id(), buffer, setOptions, res-&gt;&#123;</div><div class="line">            <span class="keyword">if</span> (res.succeeded()) &#123;</div><div class="line">                logger.debug(<span class="string">"set key: &#123;&#125; "</span>, session.data());</div><div class="line">                localSessionIds.add(session.id());</div><div class="line">                resultHandler.handle(Future.succeededFuture(<span class="keyword">true</span>));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                resultHandler.handle(Future.failedFuture(res.cause()));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(Handler&lt;AsyncResult&lt;Boolean&gt;&gt; resultHandler)</span> </span>&#123;</div><div class="line">        localSessionIds.stream().forEach(id-&gt;&#123;</div><div class="line">            redisClient.del(id, res-&gt;&#123;</div><div class="line">                <span class="comment">//如果在localSessionIds里存在，但是在redis里过期不存在了, 只要通知下就行</span></div><div class="line">                localSessionIds.remove(id);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">        resultHandler.handle(Future.succeededFuture(<span class="keyword">true</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">size</span><span class="params">(Handler&lt;AsyncResult&lt;Integer&gt;&gt; resultHandler)</span> </span>&#123;</div><div class="line">        resultHandler.handle(Future.succeededFuture(localSessionIds.size()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">        redisClient.close(res-&gt;&#123;</div><div class="line">            logger.debug(<span class="string">"关闭 redisClient "</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">redisManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        RedisOptions redisOptions = <span class="keyword">new</span> RedisOptions();</div><div class="line">        redisOptions.setHost(host).setPort(port).setAuth(auth);</div><div class="line"></div><div class="line">        redisClient = RedisClient.create(vertx, redisOptions);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisSessionStore <span class="title">host</span><span class="params">(String host)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.host = host;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisSessionStore <span class="title">port</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisSessionStore <span class="title">auth</span><span class="params">(String pwd)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.auth = pwd;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先，从get()和put()这两个方法开始，这两方法比较核心。</p>
<ol>
<li><p>get(), 创建Cookie的时候会生成一个uuid,用这个id取session,第一次我们发现无法取到， 第56行代码就会根据这个id去生成一个session。</p>
</li>
<li><p>每次发送请求的时候，我们都会重置session过期时间，所以每次get完后，返回给浏览器之前都会有一个put操作，也就是更新数据。这里的put就稍微复杂一点点，在put之前，我们需要先根据传过来的session里的id从redis里取到session。如果获取不到，说明之前通过get获取的session不是同一个对象，就出异常，这就相当于设置了一道安全的门槛吧！当获取到了，再比较两个session的版本是不是一致的，如果不一致，说明session被破环了，算是第二个安全门槛设置吧！都没有问题了，就可以put session了，并且重新设置时间。</p>
</li>
<li><p>这里依赖vertx提供的redisClient来操作数据的，所以我们必须引入这个依赖：io.vertx:vertx-redis-client:3.4.1 。</p>
</li>
<li><p>接下来还有一点需要提的是序列化问题。这里我使用的是vertx封装的一种序列化，将数据序列化到Buffer里，而SessiomImpl类里又已经实现好了序列化，从SessionImple序列化成Buffer和Buffer反序列化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionImpl</span> <span class="keyword">implements</span> <span class="title">Session</span>, <span class="title">ClusterSerializable</span>, <span class="title">Shareable</span> </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToBuffer</span><span class="params">(Buffer buff)</span> </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] bytes = id.getBytes(UTF8);</div><div class="line">    buff.appendInt(bytes.length).appendBytes(bytes);</div><div class="line">    buff.appendLong(timeout);</div><div class="line">    buff.appendLong(lastAccessed);</div><div class="line">    buff.appendInt(version);</div><div class="line">    Buffer dataBuf = writeDataToBuffer();</div><div class="line">    buff.appendBuffer(dataBuf);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">readFromBuffer</span><span class="params">(<span class="keyword">int</span> pos, Buffer buffer)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = buffer.getInt(pos);</div><div class="line">    pos += <span class="number">4</span>;</div><div class="line">    <span class="keyword">byte</span>[] bytes = buffer.getBytes(pos, pos + len);</div><div class="line">    pos += len;</div><div class="line">    id = <span class="keyword">new</span> String(bytes, UTF8);</div><div class="line">    timeout = buffer.getLong(pos);</div><div class="line">    pos += <span class="number">8</span>;</div><div class="line">    lastAccessed = buffer.getLong(pos);</div><div class="line">    pos += <span class="number">8</span>;</div><div class="line">    version = buffer.getInt(pos);</div><div class="line">    pos += <span class="number">4</span>;</div><div class="line">    pos = readDataFromBuffer(pos, buffer);</div><div class="line">    <span class="keyword">return</span> pos;</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>以上就是序列化和反序列化的实现。</p>
<ol>
<li>localSessionIds 主要考虑到清除session的时候使用，因为数据主要以保存在session为主，本地localSessionIds 保存sessionId是辅助作用。</li>
</ol>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>用法很简单，一行代码就说明。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">router.route().handler(SessionHandler.create(RedisSessionStore.create(vertx).host(<span class="string">"127.0.0.1"</span>).port(<span class="number">6349</span>)));</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> vertx </tag>
            
            <tag> session </tag>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gradle总结]]></title>
      <url>http://yoursite.com/2017/03/14/gradle%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>gradle跟maven是很类似的，但是他写起来比maven简洁，所以力荐使用gradle来构建我们的项目，而且gradle使用groovy开发的，所以gradle能够书写逻辑，但是maven这方便就很弱了，下面就来看看gradle。</p>
<h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="使用java插件"><a href="#使用java插件" class="headerlink" title="使用java插件"></a>使用java插件</h2><p>就像maven里的插件一样，gradle也有插件概念，但是这里引入插件就很简洁，只需要一行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin:&apos;java&apos;	//该插件会去src/main/java下找源代码，并打包生成build文件夹，里面有很多生成的资源</div></pre></td></tr></table></figure></p>
<h2 id="设置gradle支持utf-8"><a href="#设置gradle支持utf-8" class="headerlink" title="设置gradle支持utf-8"></a>设置gradle支持utf-8</h2><p>gradle版本的差异，有可能存在不支持汉字，所以这里配置支持UTF-8，最好每次构建项目，都配置上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[compileJava, compileTestJava]*.options*.encoding = &apos;UTF-8&apos;</div></pre></td></tr></table></figure></p>
<h2 id="定制项目"><a href="#定制项目" class="headerlink" title="定制项目"></a>定制项目</h2><p>项目编译jdk版本设置，有了这个属性，更换不同版本jdk进行编译就变得非常简单，比如：我电脑安装的是jdk8，但是我为了打成jar包兼容低版本的项目，以前我们的做法是，在电脑上安装多个jdk然后修改环境变量进行切换，现在不用那么麻烦，你只需要讲下面的两个属性sourceCompatibility，targetCompatibility都设置1.7,这样即使真是环境是jdk8，但是编译后的class是jdk7的环境的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">version = 0.1		//项目版本</div><div class="line"></div><div class="line">//设置java版本</div><div class="line">sourceCompatibility = 1.7</div><div class="line">targetCompatibility = 1.7</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jar&#123;				</div><div class="line">    manifest &#123;	</div><div class="line">        attributes &apos;Main-Class&apos;:&apos;com.robin.demo&apos;	//在jar包的MANIFEST.MF里添加属性（这里是运行的主类）</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结构定制"><a href="#结构定制" class="headerlink" title="结构定制"></a>结构定制</h2><p>maven 的标准目录结构，大家应该有一定印象吧！src/main/java/<em> , src/main/resources/</em>, src/test/java/* 等等，但是有些项目的特殊性，这里支持结构的定制（一般不要修改，按照默认的标准就可以）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//改变默认的目录结构</div><div class="line">sourceSets &#123;</div><div class="line">    main&#123;</div><div class="line">        java&#123;</div><div class="line">            srcDirs = [&apos;src&apos;]	//默认的源码结构是src/main/java,这里修改成了src</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    test&#123;</div><div class="line">    	java&#123;</div><div class="line">            srcDirs = [&apos;test&apos;]	//默认的源码结构是src/test/java,这里修改成了test</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>将src/main下的generated文件夹修改为类路径，如何在geadle里设置脚本？马上想到的解法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        java &#123;</div><div class="line">            srcDirs = [&apos;src/main/generated&apos;]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>上面的写法是错误的</strong>，为何？因为这样设置，会将源码的目录设置成了generated，而原来的src/main/java目录就失效了，不是资源目录了。正确的写法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        java &#123;</div><div class="line">            srcDirs += &apos;src/main/generated&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>解释</strong>：srcDirs这个属性的类型是数组，如果要改变的话就直接=[‘ ‘]，这样就改变整个数组的值，而 +=’ ‘ 是向数组里添加值。</p>
<h3 id="排除一些资源"><a href="#排除一些资源" class="headerlink" title="排除一些资源"></a>排除一些资源</h3><p>某些class不想打进jar包里去，或者war包里去，如何做？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        java &#123;</div><div class="line">            exclude &apos;com/robin/demo&apos;    //这样com.robin.demo包下的所有类都不会打进jar下</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="问题：-1"><a href="#问题：-1" class="headerlink" title="问题："></a>问题：</h3><p>我们在src/main/java/**.xml的mybatis映射文件打包到war包下的classes下会失败，如何将解决？</p>
<ol>
<li>方式一：<br>在resources资源目录下新建com/robin/**.xml文件，这样打包会打到classes下的。</li>
<li>方式二：将src/main/java/**.xml配置成资源目录，在build.gradle里添加：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        resources &#123; </div><div class="line">            //这里的srcDir是方法，上面的是属性</div><div class="line">            srcDir &apos;src/main/java&apos; //可以将java目录下的所有非.java资源打包到classes下</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="输出定制"><a href="#输出定制" class="headerlink" title="输出定制"></a>输出定制</h2><p>输出定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">buildDir = &apos;out&apos;	//定义输出路径，原来的是build文件夹下的</div></pre></td></tr></table></figure></p>
<h2 id="定义仓库"><a href="#定义仓库" class="headerlink" title="定义仓库"></a>定义仓库</h2><p>默认使用的maven仓库下载jar，但是速度就…这里给出如何配置私服，下面的给出的是配置aliyun的私服地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">repositories&#123;</div><div class="line">    jcenter()</div><div class="line">    maven &#123;</div><div class="line">        url &apos;http://maven.aliyun.com/nexus/content/groups/public&apos;--修改成阿里云的仓库</div><div class="line">    &#125;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="定义依赖"><a href="#定义依赖" class="headerlink" title="定义依赖"></a>定义依赖</h2><p>重头戏来了，开始怎么引入jar包了，也就是配置依赖。下面的第一行compile是完整写法，第二个compile是简写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile group:&apos;org.apache.commons&apos;, name:&apos;comcc&apos;, version:&apos;3.1&apos;</div><div class="line">    compile &apos;org.apache.commons:comcc:3.1&apos;		--上下等价，下面是简写</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="消除依赖"><a href="#消除依赖" class="headerlink" title="消除依赖"></a>消除依赖</h2><p>在项目构建的时候经常发生jar冲突问题，此时如何消除依赖了，下面给出消除依赖的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">compile (&quot;com.alibaba:dubbo:$&#123;dubboVersion&#125;&quot;) &#123;</div><div class="line">    exclude group: &quot;org.springframework&quot;</div><div class="line">    exclude module: &quot;comcc&quot; // name所对应的</div><div class="line">    exclude group: &quot;&quot;, module: &quot;&quot; //可以更加详细</div><div class="line">&#125;</div><div class="line"></div><div class="line"># exclude group: groupName</div></pre></td></tr></table></figure></p>
<h1 id="web部分"><a href="#web部分" class="headerlink" title="web部分"></a>web部分</h1><h2 id="war插件的使用"><a href="#war插件的使用" class="headerlink" title="war插件的使用"></a>war插件的使用</h2><p>进行war包构建相关的逻辑，需要引入war这个插件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;war&apos;	--这个插件主要应用与web下开发的，并且自扩展java插件</div></pre></td></tr></table></figure></p>
<h3 id="结构："><a href="#结构：" class="headerlink" title="结构："></a>结构：</h3><p>一个web项目的标准结构，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">|	</div><div class="line">---build.gradle</div><div class="line">|</div><div class="line">---src</div><div class="line">    |</div><div class="line">    --main</div><div class="line">        |</div><div class="line">        ---java/..</div><div class="line">        |</div><div class="line">        ---resources/..</div><div class="line">        |	</div><div class="line">        ----webapp</div><div class="line">            |</div><div class="line">            ---WEB-INF/web.xml</div><div class="line">            |</div><div class="line">            ---css/..</div></pre></td></tr></table></figure></p>
<h3 id="依赖域"><a href="#依赖域" class="headerlink" title="依赖域"></a>依赖域</h3><p>有的依赖是不需要跟war打在一起的，那么就可以使用providedCompile.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    providedCompile &apos;javax.servlet:servlet-api:2.5&apos;		--这个依赖由容器(例如tomcat)提供,这里会有jetty提供，他不会打包到war包里面</div><div class="line">			</div><div class="line">    runtime &apos;javax.servlet:jstl:1.1.2&apos;		--jstl这种依赖，编译时不需要，运行时需要，会成为war包的一部分</div><div class="line">&#125;</div><div class="line">--运行后会在build/libs下有个war包</div></pre></td></tr></table></figure></p>
<h2 id="定制web项目"><a href="#定制web项目" class="headerlink" title="定制web项目"></a>定制web项目</h2><p>下面是一个非标准结构的web项目，我们如何对下面的结构进行定制了？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">|</div><div class="line">--build.gradle</div><div class="line">|</div><div class="line">--src</div><div class="line">|  |</div><div class="line">|   --main/java</div><div class="line">|</div><div class="line">|</div><div class="line">---static</div><div class="line">|      |</div><div class="line">|      --css</div><div class="line">|</div><div class="line">----webfile</div><div class="line">	|</div><div class="line">	--WEB-INF/web.xml</div><div class="line">	|</div><div class="line">	---jsp/..</div></pre></td></tr></table></figure></p>
<p>写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">webAppDirName = &apos;webfile&apos;	--默认属性是src/main/webapp</div><div class="line">	</div><div class="line">war&#123;</div><div class="line">    from &apos;static&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加多个war资源目录，由于from的参数是from(Object…obj)，所以用可变参数结构来添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">war &#123;</div><div class="line">    from &apos;static01&apos;, &apos;static02&apos;, ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="jetty插件的使用"><a href="#jetty插件的使用" class="headerlink" title="jetty插件的使用"></a>jetty插件的使用</h2><p>开发阶段，我们可以使用jetty作为web容器，进行开发，速度快，便捷。下面通过插件引入，很简洁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;jetty&apos;</div></pre></td></tr></table></figure></p>
<p>运行指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle jettyRun (即使没有jar包也能跑起来)</div></pre></td></tr></table></figure></p>
<p>给jetty配置属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jettyRun &#123;</div><div class="line">    httpPort = 80		--修改jetty运行的端口号</div><div class="line">    contextPath = &apos;todo&apos;	--修改应用名</div><div class="line">&#125;</div><div class="line">//  http://localhost:80/todo</div></pre></td></tr></table></figure></p>
<h2 id="常用补充"><a href="#常用补充" class="headerlink" title="常用补充"></a>常用补充</h2><p>我们在使用Project和Task类时，这里已经为我们提供了默认的对象，我们只需要调用方法即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">version &apos;1.0&apos;	--调用Project里的setVersion(..)方法的</div></pre></td></tr></table></figure></p>
<p>当然我们可以在build.gradle里定义自己的外部属性，然后直接引用自己定义属性，通过ext命名空间：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">    vertxVersion = &quot;3.1.2&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &quot;io.vertx:vertx-core:$&#123;vertxVersion&#125;&quot;	--这里一定要用&quot;&quot;来引起字符串，不要用&apos;&apos;，否则$&#123;vertxVersion&#125;就变成了字符串而不会被转义</div></pre></td></tr></table></figure></p>
<p><strong>建议：</strong><br>尽量使用” “而少使用’ ‘</p>
<h1 id="自定义task"><a href="#自定义task" class="headerlink" title="自定义task"></a>自定义task</h1><h2 id="定义任务-关键字-task-【任务名】"><a href="#定义任务-关键字-task-【任务名】" class="headerlink" title="定义任务 关键字 task 【任务名】"></a>定义任务 关键字 task 【任务名】</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">--定义任务</div><div class="line">task print&#123;</div><div class="line">    doFirst &#123;</div><div class="line">        println &quot;01&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    doLast &#123;</div><div class="line">        println &quot;02&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>doFirst和doLast正如名字一样，一个先执行，一个后执行。下面是向已经定义的任务里添加动作(doFirst类型的话，会向顶部添加，doLast的话，会向底部添加)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">print.doFirst &#123;</div><div class="line">    println &quot;03&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">print.doLast &#123;</div><div class="line">    println &quot;04&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将自己的任务加入到gradle生命周期的一个标准任务里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">build.doFirst &#123;</div><div class="line">	//...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="gradle基于SLF4J实现了一个日志"><a href="#gradle基于SLF4J实现了一个日志" class="headerlink" title="gradle基于SLF4J实现了一个日志"></a>gradle基于SLF4J实现了一个日志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">task printVersion&lt;&lt;&#123;</div><div class="line">    logger.info(&quot;Version:$version&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="dependsOn任务依赖"><a href="#dependsOn任务依赖" class="headerlink" title="dependsOn任务依赖"></a>dependsOn任务依赖</h2><p>可以在一个任务里，依赖多个任务，执行run之前，会先执行[two, first] ，这里two, first这两个任务执行没有顺序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">task first&lt;&lt;&#123;</div><div class="line">    println &quot;one&quot;</div><div class="line">&#125;</div><div class="line">task two&lt;&lt;&#123;</div><div class="line">    println &quot;two&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">task run(dependsOn:[two, first]) &#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另一种添加依赖的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">task third &#123;</div><div class="line">    println &quot;third&quot;</div><div class="line">&#125;</div><div class="line">third.dependsOn(&quot;run&quot;)</div></pre></td></tr></table></figure></p>
<h2 id="finalizedBy指定下一个任务"><a href="#finalizedBy指定下一个任务" class="headerlink" title="finalizedBy指定下一个任务"></a>finalizedBy指定下一个任务</h2><p>上面[two, first]没有顺序，可以使用finalizedBy强行指定顺序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">task first&lt;&lt;&#123;</div><div class="line">    println &quot;one&quot;</div><div class="line">&#125;</div><div class="line">task two&lt;&lt;&#123;</div><div class="line">    println &quot;two&quot;</div><div class="line">&#125;</div><div class="line">two.finalizedBy first</div></pre></td></tr></table></figure></p>
<h2 id="任务配置块"><a href="#任务配置块" class="headerlink" title="任务配置块"></a>任务配置块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">task run &#123;</div><div class="line">    print(&quot;hello&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>随便运行gradle build/gradle clean…都会执行run这个任务块，这就是任务配置块</strong><br>为何他总会执行？<br>要从gradle的构建生命周期来解释，每个任务执行都会经历：<strong>初始化、配置、执行</strong>，三个阶段，<br><strong>所以配置块在第二阶段会执行</strong><br>配置任务快执行是有一定顺序的，当任务A依赖任务B，则A-&gt;B的。</p>
<h1 id="gradle的多项目构建"><a href="#gradle的多项目构建" class="headerlink" title="gradle的多项目构建"></a>gradle的多项目构建</h1><h2 id="在一个项目里创建几个子项目"><a href="#在一个项目里创建几个子项目" class="headerlink" title="在一个项目里创建几个子项目"></a>在一个项目里创建几个子项目</h2><p>结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">rootPrject</div><div class="line">|</div><div class="line">---sub01</div><div class="line">|       |</div><div class="line">|       ----src/main/java</div><div class="line">---sub02</div><div class="line">|       |</div><div class="line">|       ----src/main/java</div><div class="line">---subWeb</div><div class="line">|       |</div><div class="line">|       ----src/main/java</div><div class="line">---build.gradle</div><div class="line">|</div><div class="line">---settings.gradle</div></pre></td></tr></table></figure></p>
<h3 id="在settings-gradle文件里设置："><a href="#在settings-gradle文件里设置：" class="headerlink" title="在settings.gradle文件里设置："></a>在settings.gradle文件里设置：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include &apos;sub01&apos;, &apos;sub02&apos;, &apos;subWeb&apos;</div></pre></td></tr></table></figure>
<p> 或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">include &apos;sub01&apos;</div><div class="line">include &apos;sub02&apos;</div><div class="line">include &apos;subWeb&apos;</div></pre></td></tr></table></figure></p>
<p>注意：setings.gradle会在构建初始化阶段执行。</p>
<h3 id="在根项目下配置gradle的逻辑："><a href="#在根项目下配置gradle的逻辑：" class="headerlink" title="在根项目下配置gradle的逻辑："></a>在根项目下配置gradle的逻辑：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">ext.projectIds = [group:&quot;com.robin&quot;, version:&quot;1.0-SNAPSHOT&quot;]</div><div class="line"></div><div class="line">group = projectIds.group;</div><div class="line">version = projectIds.version</div><div class="line"></div><div class="line">project(&quot;:sub01&quot;) &#123; //每个子模块也是一个项目，:是路径，我们可以申明sub/sub001下的sub001位一个子项目，此时写法是project(:sub:sub001)</div><div class="line">    group = projectIds.group;</div><div class="line">    version = projectIds.version</div><div class="line"></div><div class="line">    apply plugin: &quot;java&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">project(&quot;:sub02&quot;) &#123;</div><div class="line">    group = projectIds.group;</div><div class="line">    version = projectIds.version</div><div class="line"></div><div class="line">    apply plugin: &quot;java&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">project(&quot;:subWeb&quot;) &#123;</div><div class="line">    group = projectIds.group;</div><div class="line">    version = projectIds.version;</div><div class="line"></div><div class="line">    apply plugin: &quot;war&quot;</div><div class="line">    apply plugin: &quot;jetty&quot;</div><div class="line"></div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        providedCompile &quot;javax.servlet:servlet-api:2.5&quot;</div><div class="line">        runtime &quot;javax.servlet:jstl:1.1.2&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个项目都有group和versin属性，上面的做法是将group和version的值放入list集合然后添加到ext域里去，这样才能被其他模块引用。一般我们将其他模块需要引用的变量，我们会放入到ext里去的。</p>
<h2 id="项目之间的依赖"><a href="#项目之间的依赖" class="headerlink" title="项目之间的依赖"></a>项目之间的依赖</h2><p>一般子项目sub01和sub02会打成jar包的，而subWeb的子项目会打成war包的，并且subWeb项目会依赖sub01、sub02这两个项目。下面我们来生命项目之间的依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">project(&quot;:sub01&quot;) &#123;</div><div class="line">    ...</div><div class="line">    apply plugin: &quot;java&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">project(&quot;:sub02&quot;) &#123;</div><div class="line"></div><div class="line">    apply plugin: &quot;java&quot;    //一定要加上这个，否则项目之间的依赖会出错</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        compile project(&apos;:sub01&apos;);   //编译时依赖sub01</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">project(&quot;:subWeb&quot;) &#123;</div><div class="line"></div><div class="line">    apply plugin: &quot;war&quot;</div><div class="line">    apply plugin: &quot;jetty&quot;</div><div class="line"></div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        providedCompile &quot;javax.servlet:servlet-api:2.5&quot;</div><div class="line"></div><div class="line">        compile project(&quot;:sub02&quot;)</div><div class="line">        runtime &quot;javax.servlet:jstl:1.1.2&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用allProjects和subProjects来构建公共项目块："><a href="#使用allProjects和subProjects来构建公共项目块：" class="headerlink" title="使用allProjects和subProjects来构建公共项目块："></a>使用allProjects和subProjects来构建公共项目块：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;       //所有的项目都共有，包括根项目和子项目</div><div class="line">    group = &quot;com.robin&quot;</div><div class="line">    version = &quot;1.0-SNAPSHOT&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">subprojects &#123;   //所有的子项目包含java插件</div><div class="line">    apply plugin: &quot;java&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将子项目的构建脚本也写在根build.gradle写显示不是好的选择，可以在每个子项目下创建一个build.gradle文件。</p>
<ul>
<li>以后根build.gradle下只有：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;       //所有的项目都共有，包括根项目和子项目</div><div class="line">    group = &quot;com.robin&quot;</div><div class="line">    version = &quot;1.0-SNAPSHOT&quot;</div><div class="line"></div><div class="line">//    apply plugin: &quot;java&quot;  //若是这里加了java插件，那么跟项目下的src目录也是起作用，所以不建议添加在此处</div><div class="line">&#125;</div><div class="line"></div><div class="line">subprojects &#123;</div><div class="line">    apply plugin: &quot;java&quot;</div><div class="line"></div><div class="line">    sourceCompatibility = 1.8</div><div class="line"></div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>子项目subWeb的build.gradle下有：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">apply plugin: &quot;war&quot;</div><div class="line">apply plugin: &quot;jetty&quot;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    providedCompile &quot;javax.servlet:servlet-api:2.5&quot;</div><div class="line"></div><div class="line">    compile project(&quot;:sub02&quot;)</div><div class="line">    runtime &quot;javax.servlet:jstl:1.1.2&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他的子项目也是类似的。</p>
<h2 id="gretty插件"><a href="#gretty插件" class="headerlink" title="gretty插件"></a>gretty插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;org.akhikhl.gretty&apos;</div><div class="line"></div><div class="line">gretty &#123;</div><div class="line">    servletContainer = &apos;tomcat8&apos;</div><div class="line">    httpPort = 80</div><div class="line">    contextPath = &quot;&quot;</div><div class="line">    debugSuspend = false</div><div class="line">&#125;</div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;org.akhikhl.gretty:gretty:+&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="gradle打包常用任务"><a href="#gradle打包常用任务" class="headerlink" title="gradle打包常用任务"></a>gradle打包常用任务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def replace(fileName, map) &#123;</div><div class="line">    def fl = file(fileName)</div><div class="line">    def content = fl.getText(&quot;UTF-8&quot;)</div><div class="line">    map.each &#123; k, v -&gt; content = content.replace(k, v) &#125;</div><div class="line">    fl.write(content, &quot;UTF-8&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">def cp(source, dest) &#123;</div><div class="line">    file(dest).write(file(source).getText(&quot;UTF-8&quot;), &quot;UTF-8&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="gradle插件开发"><a href="#gradle插件开发" class="headerlink" title="gradle插件开发"></a>gradle插件开发</h1><p>开发工具：idea, gradle</p>
<h2 id="新建工程："><a href="#新建工程：" class="headerlink" title="新建工程："></a>新建工程：</h2><p>在idea里新建root工程plugins， 修改build.gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line"></div><div class="line">    group &apos;com.robin&apos;</div><div class="line">    version &apos;1.0-SNAPSHOT&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">subprojects &#123;</div><div class="line">    apply plugin: &apos;groovy&apos;</div><div class="line"></div><div class="line">    repositories &#123;</div><div class="line">        maven &#123;</div><div class="line">            url &quot;http://nexus.nxin.com/nexus/content/groups/public/&quot;</div><div class="line">        &#125;</div><div class="line">        mavenCentral()</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="新建子工程"><a href="#新建子工程" class="headerlink" title="新建子工程"></a>新建子工程</h2><h3 id="新建gradle-groovy的plugin01子工程，其build-gradle为："><a href="#新建gradle-groovy的plugin01子工程，其build-gradle为：" class="headerlink" title="新建gradle groovy的plugin01子工程，其build.gradle为："></a>新建gradle groovy的plugin01子工程，其build.gradle为：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//插件坐标</div><div class="line">group &apos;com.nxin&apos;</div><div class="line">version &apos;1.2&apos;</div><div class="line"></div><div class="line">apply plugin: &apos;maven&apos;</div><div class="line"></div><div class="line">uploadArchives &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenDeployer &#123;</div><div class="line">            //测试，打包到本地</div><div class="line">            repository(url: uri(&apos;../repo&apos;))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile gradleApi()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在src-main-groovy下新建com-robin-demo-HelloPlugin-groovy类："><a href="#在src-main-groovy下新建com-robin-demo-HelloPlugin-groovy类：" class="headerlink" title="在src/main/groovy下新建com.robin.demo.HelloPlugin.groovy类："></a>在src/main/groovy下新建com.robin.demo.HelloPlugin.groovy类：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.robin.demo</div><div class="line"></div><div class="line">import org.gradle.api.Plugin</div><div class="line">import org.gradle.api.Project</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by robin on 2017/1/12.</div><div class="line"> */</div><div class="line">class HelloPlugin implements Plugin&lt;Project&gt; &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void apply(Project project) &#123;</div><div class="line"></div><div class="line">        project.task(&apos;hello&apos;) &#123;</div><div class="line">            println &quot;HelloWorld&quot;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="给插件指定简短别名"><a href="#给插件指定简短别名" class="headerlink" title="给插件指定简短别名"></a>给插件指定简短别名</h3><p>方便 apply plugin: shortName r;在resources下新建META-INF/gradle-plugins/hello.properties,hello就是shortNmae,hello.properties里的内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">implementation-class=com.robin.demo.HelloPlugin</div></pre></td></tr></table></figure></p>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>然后在子工程下打包，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle -q upload    //打包成jar</div></pre></td></tr></table></figure></p>
<h3 id="新建测试子模块-testHelloPlugin-build-gradle为："><a href="#新建测试子模块-testHelloPlugin-build-gradle为：" class="headerlink" title="新建测试子模块 testHelloPlugin,build.gradle为："></a>新建测试子模块 testHelloPlugin,build.gradle为：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">group &apos;com.robin&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        maven &#123;</div><div class="line">            url uri(&apos;../repo&apos;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.nxin:plugin01:1.2&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;hello&apos;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">//    compile &apos;org.codehaus.groovy:groovy-all:2.3.11&apos;</div><div class="line">//    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.11&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在子模块中运行 gradle hello</p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> gradle </tag>
            
            <tag> 构建 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
